buildscript {
    ext
            {
                nexus_url = "${project.findProperty('nexus_url') ?: System.getenv('NEXUS_HOST')}"
                nexus_user = "${project.findProperty('nexus_user') ?: System.getenv('NEXUS_USERNAME')}"
                nexus_pw = "${project.findProperty('nexus_pw') ?: System.getenv('NEXUS_PASSWORD')}"
                def noNexusString = (String) (project.findProperty('no_nexus') ?: System.getenv('NO_NEXUS'))
                no_nexus = noNexusString == null ? false : noNexusString.toBoolean()
                if (!no_nexus && (nexus_url == "null" || nexus_user == "null" || nexus_pw == "null")) {
                    throw new GradleException("property no_nexus='false' (or not defined) but at least one of the properties nexus_url, nexus_user or nexus_pw is not configured. Please configure those properties!")
                }

                def folderRel = (String)("${project.findProperty('nexus_folder_releases') ?: System.getenv('NEXUS_FOLDER_RELEASES')}")
                nexusFolderReleases = folderRel == "null" ? "maven-releases" : folderRel

                def folderSnaps = (String)("${project.findProperty('nexus_folder_snapshots') ?: System.getenv('NEXUS_FOLDER_SNAPSHOTS')}")
                nexusFolderSnapshots = folderSnaps == "null" ? "maven-snapshots" : folderSnaps

                snippetsDir = file('build/generated-snippets')
            }
}

plugins {
    id 'org.asciidoctor.convert' version '1.5.3'
    id 'org.springframework.boot' version '2.1.3.RELEASE'
    id 'java'
    id 'maven'
    id 'jacoco'
    id 'maven-publish'
}


ext['spring-restdocs.version'] = '2.0.2.RELEASE'

apply plugin: 'io.spring.dependency-management'

group = 'org.opendevstack.tstsla03'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    if (no_nexus) {
        println("using repositories 'jcenter' and 'mavenCentral', because property no_nexus=$no_nexus")
        jcenter()
        mavenCentral()
    } else {
        println("using nexus repositories")
        maven() {
            url "${nexus_url}/repository/jcenter/"
            credentials {
                username = "${nexus_user}"
                password = "${nexus_pw}"
            }
        }

        maven() {
            url "${nexus_url}/repository/maven-public/"
            credentials {
                username = "${nexus_user}"
                password = "${nexus_pw}"
            }
        }

        maven() {
            url "${nexus_url}/repository/atlassian_public/"
            credentials {
                username = "${nexus_user}"
                password = "${nexus_pw}"
            }
        }
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-jersey'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'

    testCompile "org.springframework.restdocs:spring-restdocs-webtestclient:${project.ext['spring-restdocs.version']}"
    asciidoctor "org.springframework.restdocs:spring-restdocs-asciidoctor:${project.ext['spring-restdocs.version']}"
}

test {
    outputs.dir snippetsDir
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

bootJar {
    doLast {
        println "Copy jar file build/libs/$bootJar.archiveName to docker directory!"
        copy {
            from "build/libs/$bootJar.archiveName"
            into "$buildDir/../docker"
            rename(bootJar.archiveName, "app.jar")
        }
    }
}


publishing {
    repositories {
        maven {
            url = "${nexus_url}/repository/" + (version.endsWith('SNAPSHOT') ? nexusFolderSnapshots : nexusFolderReleases  )

            credentials {
                username = "${nexus_user}"
                password = "${nexus_pw}"
            }

        }
    }
    publications {
        maven(MavenPublication) {
            artifactId = rootProject.name
            groupId = group
            version = "${version}"
            from components.java
        }
    }
}


